' Contains high-level flow frm Client's perspective
' NOTE:
' Client only sees the link to STF's proposal.
' He/she is not a user to the Novari system
' which we are making

@startuml
    title View from Client's Perspective
    start
    :Client Contacts STF;
    :STF determines the type of Transaction;

    fork
        #Orchid:Client only wants a consultation;
        :STF Enters the following details:
            1. Client
            2. Agent
            3. Consult;
        :STF clicks //Save to Calendar// button
        so that the consultation is "booked";
        
        if (Client is undecided?) then (Yes)
            #OrangeRed:Consultation becomes //Pending//;
            note left #LightPink
                //Pending// state is
                not yet in wireframes;
            end note
            stop
        else (No)
        endif
        
        if (HUB requires payment\nfor Consultations?) then (Yes)

            #GreenYellow:Client pays the Consultation fee
            once consultation is done;

            note left
                Need to create new
                wireframes starting from here
            end note

            :Client receives invoice;
            :Client pays for STF's service;
        else (No)
        endif
            
        #SkyBlue://Consultation Done// state is reached;
        
        note left #LightPink
            //Consutation Done// status
            is not in wireframes
        end note
    
    fork again
        #Orchid:Client wants to continue having a
        Quote coming from a prior consultation;

        :STF is directed to //Client's Details// page;
        :STF enters the following information:
            1. Client(s) Details - **//Pre-filled already//**
            2. Agent / Referrer details - **//Pre-filled already//**
            3. Install and Access details
            4. Information about the desired look and feel
            5. Styling Proposal
            6. Additional Services;

        note right
            STF can make edits to //Pre-filled// items,
            but they are pre-filled by default since data came
            from a prior consultation.
        end note

        :STF sends the link to his/her Quote to the client;

        if (Client is undecided?) then (Yes)
            #OrangeRed:Quote becomes //Pending//;
            note left #LightPink
                //Pending// state is
                not yet in wireframes;
            end note
            stop
        else (No)
        endif

        if (Client accepts the quote?) then (Yes)
            :Client receives invoice;
            :Client pays for STF's service;
            note #LightPink
                Client already pays even though
                the furnitures are not yet delivered?
            end note

            #SkyBlue:Quote becomes a //Job//;
        else (No)
            #OrangeRed:Quote now has a
            //Rejected// state;

            note right #LightPink
                //Rejected// state is
                not in wireframes;
            end note
        endif

    fork again
        #Orchid:Client wants to
        immediately have a quotation;

        :STF enters the following:
            1. Client(s) Details
            2. Agent / Referrer details
            3. Install and Access details
            4. Information about the desired look and feel
            5. Styling Proposal
            6. Additional Services;

        #GreenYellow:STF sends a summary of the
        quotation to Client;

        note right #OrangeRed
            Flow of wireframes leading to the view
            where Client sees STF's proposal is **WRONG**
        end note

        if (Client accepts the quote?) then (Yes)
            #SkyBlue:Client accepts STF's quotation.
            It becomes a //Job// at this time;
            :Client receives invoice;
            :Client pays for STF's service;
            note #LightPink
                Client already pays even though
                the furnitures are not yet delivered?
            end note

        else (No)
            #OrangeRed:Quote should
            have a //Rejected// state;

            note right
                There is no //Rejected// State for Quotes.
            end note
            :Client receives invoice;
            :Client pays for STF's service;
        endif
    end fork
    stop
@enduml